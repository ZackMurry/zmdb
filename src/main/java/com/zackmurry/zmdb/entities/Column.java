package com.zackmurry.zmdb.entities;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.zackmurry.zmdb.tools.ZmdbLogger;
import com.zackmurry.zmdb.entities.auto.AutoFactory;
import com.zackmurry.zmdb.files.FileEditor;
import com.zackmurry.zmdb.files.FileReading;

import java.util.ArrayList;
import java.util.UUID;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class Column<T> implements Cloneable {

    private String name;
    private ArrayList<T> rows = new ArrayList<>();
    private String databaseName;
    private String tableName;
    private boolean autogenerated = false;
    private boolean isIndexColumn = false;

    public Column() {

    }

    public Column(String name) {
        this.name = name;
    }

    public Column(String databaseName, String tableName, String name) {
        this.databaseName = databaseName;
        this.tableName = tableName;
        this.name = name;
    }

    public Column(String databaseName, String tableName, String name, boolean autogenerated) {
        this.databaseName = databaseName;
        this.tableName = tableName;
        this.name = name;
        this.autogenerated = autogenerated;
    }

    public int getNumberOfRows() {
        return rows.size();
    }

    public int addRow(Object item) {
        if(isIndexColumn) {
            if(rows.contains((T) item)) {
                return 0;
            }
        }
        if(autogenerated) {
            //getting the type from the file
            String type = FileReading.getTypeFromColumn(databaseName, tableName, name);
            if(type.equals("UUID-auto")) {
                AutoFactory<UUID> uuidAutoFactory = new AutoFactory<>(UUID.class);
                rows.add((T) uuidAutoFactory.getObject());
                return FileEditor.writeToColumn(rows.get(rows.size()-1).toString(), databaseName, tableName, name);
            }
            else {
                ZmdbLogger.log("Unable to add row to column " + name + " in table " + tableName + " in database " + databaseName + " because type " + type + " is not supported by auto-generation.");
                return 0;
            }
        }
        else {
            try {
                var item2 = (T) item;
                rows.add(item2);
                return FileEditor.writeToColumn(item.toString(), databaseName, tableName, name);
            } catch (Exception e) {
                ZmdbLogger.log("Error: cannot convert " + item + "to the appropriate type");
                e.printStackTrace();
                return 0;
            }
        }
    }

    public int includeRow(Object item) {
        try{
            var item2 = (T) item;
            rows.add(item2);
            return 1;
        } catch (Exception e) {
            ZmdbLogger.log("Error: cannot convert " + item + "to the appropriate type");
            e.printStackTrace();
            return 0;
        }

    }

    public T getItemFromRow(int index) {
        return rows.get(index);
    }

    public ArrayList<T> getAllRows() {
        return rows;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public boolean nameIs(String name) {
        return this.name.equals(name);
    }

    public String getTableName() {
        return tableName;
    }

    public void setTableName(String tableName) {
        this.tableName = tableName;
    }

    public String getDatabaseName() {
        return databaseName;
    }

    public void setDatabaseName(String databaseName) {
        this.databaseName = databaseName;
    }

    /**
     * @param data element to check for
     * @return -1 for no, else returns index of element where it is first found
     */
    public int containsElement(Object data) {
        for (int i = 0; i < rows.size(); i++) {
            if(rows.get(i).equals(data)) {
                return i;
            }
        }
        return -1;
    }

    public boolean elementAtIndexEquals(int index, Object element) {
        return rows.get(index).equals(element);
    }

    public int findIndex(Object data) {
        int index = -1;
        for (int i = 0; i < rows.size(); i++) {
            if(rows.get(i).equals(data)) index = i;
        }
        return index;
    }

    public void removeRow(int index) {
        rows.remove(index);
    }

    public boolean isAutogenerated() {
        return autogenerated;
    }

    public void setAutogenerated(boolean autogenerated) {
        this.autogenerated = autogenerated;
    }

    public Object clone() throws CloneNotSupportedException{
        return super.clone();
    }

    public boolean isIndexColumn() {
        return isIndexColumn;
    }

    public void setIndexColumn(boolean indexColumn) {
        isIndexColumn = indexColumn;
    }

    /**
     * @apiNote requires this column to be an index column
     * @return -1 for not an index column or item not found, else index of row that the item belongs to
     */
    public int getIndexOfItem(T item) {
        if(!isIndexColumn) {
            ZmdbLogger.log("You can only find the index of a single item if the column you are looking in is an index column.");
            return -1;
        }

        for (int i = 0; i < rows.size(); i++) {
            if(rows.get(i).equals(item)) {
                return i;
            }
        }
        return -1;
    }

}
