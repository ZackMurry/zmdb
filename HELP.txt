# Documentation

## Getting started

### Running
To start the program, go to the latest release of the project on GitHub (https://github.com/ZackMurry/zmdb/releases),
download it, and run it.

### Sending requests
Use an HTTP request sender (like Postman) or send HTTP requests programmatically to send requests to localhost:9001 (by default).

## Layout
The highest level of container is a database. Each database can contain tables.
Each table can contain columns, which combined with other columns, contains rows.

## Commands

### Add database

##### POST request to /databases
Takes a request body, which is always a JSON object.
The JSON object will have a "name" attribute, which is a string.

Returns 1 for successful and 0 for unsuccessful.

Example:  
POST localhost:9001/databases  
{  
    "name": "myDatabase"
}  

### Add table

##### POST request to /databases/{databaseName}/tables
Takes a JSON object with an attribute called "name", which is a string.

Returns 1 for successful and 0 for unsuccessful.

Example:  
POST localhost:9001/databases/myDatabase/tables  
{  
    "name": "myTable"
}

### Add column
#### POST request to /databases/{databaseName}/tables/{myTable}/columns
Takes a JSON object with two String attributes called "name" and "type" (see types).

Returns 1 for successful and 0 for unsuccessful.

Example:  
POST localhost:9001/databases/myDatabase/tables/myTables/columns  
{  
    "name": "myColumn",
    "type": "String"
}

### Get all databases

#### GET request to /databases
Does not take a JSON object.

Returns a JSON object which contains details about all the databases.

Example:  
GET localhost:9001/databases  

Response:
[
    {
        "name": "myDatabase",
        "tables": [
            ...
        ],
        "tableCount": 1
    }
]

### Add row to table

#### POST request to /databases/{databaseName}/tables
Takes a JSON object with two values, a list called "data", which contains the information you want to add,
and a list called "order", which contains the the column to add each value from the respective index in 'data' to.

Returns 1 for successful, 0 for unsuccessful.

Example:
POST localhost:9001/databases/myDatabase/tables/myTable
{
    "data": ["myRowColumn"],
    "order": ["myColumn"]
}


### Get number of databases

#### GET request to /databases/count
Doesn't take any body.

Returns number of databases.

Example:
GET localhost:9001/databases/count

Response:
1


### Get database by name

#### GET request to /databases/{name}
Doesn't take a body.

Returns a database.

Example:
GET localhost:9001/databases/myDatabase

Response:
{
    "name": "myDatabase",
    "tables": [
        ...
    ],
    "tableCount": 1
}

### Get table by name

#### GET request to /databases/{databaseName}/tables/{tableName}
Doesn't take a body.

Returns a table.

Example:
GET localhost:9001/databases/myDatabase/tables/myTable

Response:
{
    "name": "myTable",
    "databaseName": "myDatabase",
    "indexOfIndexColumn": 0,
    "columnNames": [
        "myColumn"
    ],
    "numberOfColumns": 1,
    "indexColumnName": "myColumn",
    "allColumns": [
        ...
    ]
}

### Get column by name

#### GET request to /databases/{databaseName}/tables/{tableName}/columns/{columnName}
Doesn't take a body.

Returns a column.

Example:
GET localhost:9001/databases/myDatabase/tables/myTable/columns/myColumn

Response:
{
    "name": "myColumn",
    "databaseName": "myDatabase",
    "tableName": "myTable",
    "autogenerated": false,
    "numberOfRows": 1,
    "allRows": [
        "myRowColumn"
    ]
}

### Get number of tables in a database

#### GET request to /databases/{databaseName}/tables/count
Doesn't take a body.

Returns number of tables in a specific database.

Example:
GET localhost:9001/databases/myDatabase/count

Response:
1

### Get tables from a database

#### GET request to /databases/{databaseName}/tables
Doesn't take a body.

Returns a list of tables in the database.

Example:
GET localhost:9001/databases/myDatabase/tables

Response:
[
    {
        "name": "myTable",
        "databaseName": "myDatabase",
        "indexOfIndexColumn": 0,
        "columnNames": [
            "myColumn"
        ],
        "numberOfColumns": 1,
        "indexColumnName": "myColumn",
        "allColumns": [
            ...
        ]
    }
]


### See if a table contains a specific row

#### GET request to /databases/{databaseName/tables/{tableName}/contains
Takes a JSON object with two values, the first being a list, called "data" with the data that you want to check if the table contains and the second being a list, called "order",
with the order of the columns that you entered the data in.

Returns a boolean.

Example:
GET localhost:9001/databases/myDatabase/tables/myTable/contains
{
    "data": ["myRowColumn"],
    "order": ["myColumn"]
}

Response:
true


### Delete a database

### DELETE request to /databases/{databaseName}
Does not take a body.

Returns 1 for successful and 0 for unsuccessful

Example:
DELETE localhost:9001/databases/myDatabase

Response:
1

### Delete a table

### DELETE request to /databases/{databaseName}/tables/{tableName}
Does not take a body.

Returns 1 for successful and 0 for unsuccessful

Example:
DELETE localhost:9001/databases/myDatabase/tables/myTable

Response:
1


### Delete a column

### DELETE request to /databases/{databaseName}/tables/{tableName}/columns/{columnName}
Does not take a body.

Returns 1 for successful and 0 for unsuccessful

Example:
DELETE localhost:9001/databases/myDatabase/tables/myTable

Response:
1


### Delete a row

#### DELETE request to /databases/{databaseName}/tables/{tableName}/rows
Takes a JSON object with two fields, the first being a list called "data", which contains the data for the row you want to delete, and the second
being a list called "order", which contains the order of the columns that you entered the data in.

Returns 1 for successful and 0 for unsuccessful

Example:
DELETE localhost:9001/databases/myDatabase/tables/myTable/rows
{
    "data": ["myRowColumn", "myRow2"],
    "order": ["myColumn", "mySecondColumn"]
}

Response:
1

#### DELETE request to /databases/{databaseName}/tables/{tableName}/rows/{index}
Does not take a request body. The index is the index of the row that you want to delete, which can be found using GET requests.

Returns 1 for successful and 0 for unsuccessful

Example:
DELETE localhost:9001/databases/myDatabase/tables/myTable/rows/0

Response:
1


### Get index column
The index column of a table is a column with unique rows, which can act as an ID. You can also disable having index columns altogether, but they're on by default.

#### GET request to /databases/{databaseName}/tables/{tableName}/index
Does not take a request body.

Returns the name of the index column, or OFF if index columns are disabled for that table.

Example:
GET localhost:9001/databases/myDatabase/tables/myTable/index

Response:
myColumn


### Set index column

#### PUT request to /databases/{databaseName}/tables/{tableName}/index
Takes a JSON object that contains a value named "name", which contains the name of the new index column. Set 'name' to "OFF" to disable index columns.

Returns 1 for successful and 0 for unsuccessful

Example:
PUT localhost:9001/databases/myDatabase/tables/myTable/index
{
    "name": "OFF"
}

Response:
1

### Delete all databases

#### DELETE request to /databases
Does not take a request body.

Returns 1 for successful and 0 for unsuccessful.

Example:
DELETE localhost:9001/databases

Response:
1


other not-yet-documented requests:

    @DeleteMapping("/databases/{databaseName}/tables")
    public int deleteAllTablesInDatabase(@PathVariable("databaseName") String databaseName);

    @DeleteMapping("/databases/{databaseName}/tables/{tableName}/columns")
    public int deleteAllColumnsInTable(@PathVariable("databaseName") String databaseName, @PathVariable("tableName") String tableName);

    @GetMapping("/databases/{databaseName}/tables/{tableName}/columns/{columnName}/rows")
    public ArrayList<?> getAllRowsInColumn(@PathVariable("databaseName") String databaseName, @PathVariable("tableName") String tableName, @PathVariable("columnName") String columnName);

    @PostMapping("/databases/{databaseName}/tables/{tableName}/columns/{columnName}/paste")
    public int copyPasteColumn(@PathVariable("databaseName") String databaseName, @PathVariable("tableName") String tableName, @PathVariable("columnName") String columnName, @RequestBody ProtoRequestPath protoRequestPath);

    @PostMapping("/databases/{databaseName}/tables/{tableName}/paste")
    public int copyPasteTable(@PathVariable("databaseName") String databaseName, @PathVariable("tableName") String tableName, @RequestBody ProtoRequestPath protoRequestPath);

    @PostMapping("/databases/{databaseName}/paste")
    public int copyPasteDatabase(@PathVariable("databaseName") String databaseName, @RequestBody ProtoRequestPath protoRequestPath);

    @RequestMapping(value = "/databases/{databaseName}", method = RequestMethod.PATCH)
    public int renameDatabase(@PathVariable String databaseName, @RequestBody ProtoString protoString);

    @RequestMapping(value = "/databases/{databaseName}/tables/{tableName}", method = RequestMethod.PATCH)
    public int renameTable(@PathVariable String databaseName, @PathVariable("tableName") String tableName, @RequestBody ProtoString protoString);

    @RequestMapping(value = "/databases/{databaseName}/tables/{tableName}/columns/{columnName}", method = RequestMethod.PATCH)
    public int renameColumn(@PathVariable String databaseName, @PathVariable("tableName") String tableName, @PathVariable("columnName") String columnName, @RequestBody ProtoString protoString);

    @DeleteMapping("/log")
    public int deleteLogData();

    @GetMapping("/exit")
    public void exitApplication();

    @GetMapping("/port")
    public int getPort();

    @PutMapping("/port")
    public int setPort(@RequestBody ProtoInteger protoInteger);


